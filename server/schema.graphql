# Server specific settings.
type ServerSetting {
  # Server ID.
  serverId: String!
  # If add role is enabled for everyone.
  addRoleForAll: Boolean
  # If join/leave messages are enabled, and if so, what message and channel.
  joinLeaveMessages: JoinLeaveMessages
  # If join autorole is enabled, and if so, what role.
  joinAutorole: String
  # If text recognition on image send is enabled.
  ocrOnSend: Boolean
}

# Server type.
type Server {
  # ID of server.
  serverId: String!
  # Permission to manage it?
  perms: Boolean
  # Icon of server.
  icon: String
  # Name of server.
  name: String
}

# Joining and leaving servers.
type JoinLeaveMessages {
  # Name of channel.
  channelName: String
  # What to post when joining.
  joinMessage: String
  # What to post when leaving.
  leaveMessage: String
}

# Enable queries.
type Query {
  # Query server settings.
  serverSettings(serverId: String!, linkToken: String!): ServerSetting!
  # Get the user for a link code.
  getUserInfo(linkToken: String!): [Server!]!
  # Get bot ID.
  getBotId: String!
}

# Input for modifying join/leave messages.
input JoinLeaveMessagesInput {
  # Name of channel.
  channelName: String!
  # What to post when joining.
  joinMessage: String
  # What to post when leaving.
  leaveMessage: String
}

# Input for editServerSettings mutation.
input EditServerSettingsInput {
  # Server ID of the server.
  serverId: String!
  # Token of the user by whom the operation is performed.
  linkToken: String!
  # Enable public roles through this setting.
  addRoleForAll: Boolean
  # Edit join autorole through this setting.
  joinAutorole: String
  # Edit join leave messages through this setting.
  joinLeaveMessages: JoinLeaveMessagesInput
  # Edit text recognition on image send through this setting.
  ocrOnSend: Boolean
}

# Enable mutations.
type Mutation {
  # Edit server settings.
  editServerSettings(input: EditServerSettingsInput!): ServerSetting!
}

schema {
  mutation: Mutation
  query: Query
}
